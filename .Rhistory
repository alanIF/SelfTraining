source('script1.r')
source('script1.r')
source('script1.r')
source('script1.r')
source('script1.r')
source('script1.r')
source('configuracoes.r')
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('configuracoes.r')
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
#PROBLEMAS A RESOLVER
#karliane - tentar pegar os resultados (acuracia) - ver base teste script alexandre
#alan - aprender como colocar os resultados em uma matriz e depois em um arquivo
#alan - incluir as demais bases nesse script
#karliane e alan - aprender a usar outros classificadores que n?o seja arvore
#dividir a base em treinamento e teste, o q eu fiz n?o t? certo.
#1 - transformar os atributos n?o num?ricos em num?ricos - tentar filtro weka - alan achou paleativo, usaremos de acordo com a necessidade
#2 - descobrir pq a confian?a da iris s? d? 1 - resolvido, n?o sei como...
#bases de dados
#bupa, cleveland, ecoli, glass, haberman, iris, monk, pima, vehide, wisconsin
#diret?rio local para salvar as bases e resultados
#fazer a instalação/carregamento de pacotes e definir diretório local
source('C:/local_R/projeto_karliane/configuracoes.R')
base_original
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
base_treino_self_training_rot
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
base$class
indice_treinamento <- createDataPartition(base_original$num, p=0.75, list=FALSE)
base_original
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
form <- cat(classe,'~','.')
form
x <- cat(classe,'~','.')
x
x <- c(classe,'~','.')
x
x <- c(cat((classe,'~','.'))
x <- c(cat(classe,'~','.'))
x
x <- factor(classe,'~','.')
x
x <- classe + '~' + '.')
x <- classe + '~' + '.'
?paste
x <- paste(classe,'~','.')
x
x <- paste(classe,'~','.', sep = "")
x
form <- paste(classe,'~', '.', sep="")
form
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
form <- as.formula(paste(classe,'~', '.'))
as.form
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
predict(model,base_teste,type='class')
base_original$class
base_teste$class
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
base_original[, classe]
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
base_original[, classe]
cat("\n Acerto (%) = \n", levels(base_original[, classe]), "\n", diag(matriz_confusao1) / colSums(matriz_confusao1) * 100)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
cat("\n Acerto (%) = \n", levels(base_original[, classe]), "\n", diag(matriz_confusao1) / colSums(matriz_confusao1) * 100)
levels(base_original[, classe])
levels(base_original[, "Species"])
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
levels(base_original[, "Species"])
levels(base_original[, classes])
levels(base_original[, as.character(classe)])
levels(base_original[, classe])
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
debugSource('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
View(data_arquivo)
debugSource('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
?data.frame
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
as.double(acc)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/treinamento.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/treinamento.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
source('C:/local_R/projeto_karliane/script_main.R', encoding = 'UTF-8', echo=TRUE)
#PROBLEMAS A RESOLVER
#karliane e alan - aprender a usar outros classificadores que n?o seja arvore
#dividir a base em treinamento e teste, o q eu fiz n?o t? certo.
#1 - transformar os atributos n?o num?ricos em num?ricos - tentar filtro weka - alan achou paleativo, usaremos de acordo com a necessidade
#2 - descobrir pq a confian?a da iris s? d? 1 - resolvido, n?o sei como...
#bases de dados
#bupa, cleveland, ecoli, glass, haberman, iris, monk, pima, vehide, wisconsin
#diret?rio local para salvar as bases e resultados
#fazer a instalaÃ§Ã£o/carregamento de pacotes e definir diretÃ³rio local
source('C:/local_R/projeto_karliane/configuracoes.R')
print("FunÃ§Ã£o para pegar a base de dados e colocar em uma variÃ¡vel base")
getdata <- function(...)
{
e <- new.env()
name <- data(..., envir = e)[1]
e[[name]]
}
#variaveis para guardar e gravar no arquivo
it_g <-c()
bd_g <-c()
thrConf_g<-c()
nr_added_exs_g<-c()
tx_g <- c()
acc_g <- c()
bd <- c()
tx <- c()
#  acc <- 0.0
for (i in 1:6){
for (j in 1:5){
if (j == 1) taxa = 5
else if (j == 2) taxa = 10
else if (j == 3) taxa = 15
else if (j == 4) taxa = 20
else if (j == 5) taxa = 25
source('C:/local_R/projeto_karliane/organiza_dados.R')
print("iniciando o treinamento")
#fun??o que ser? passada como par?metro predFunc da fun??o selftrain
f <- function(m,d) {
l <- predict(m,d,type='class')
c <- apply(predict(m,d),1,max)
data.frame(cl=l,p=c)
}
source('C:/local_R/projeto_karliane/treinamento.R')
}
}
#data frame que sera guardado no arquivo
data_arquivo <- data.frame(tx_g,it_g,bd_g,thrConf_g,nr_added_exs_g)
#escrever no arquivo
write.csv(data_arquivo, "resultado.csv", row.names = FALSE)
data_arquivo_acc <- data.frame(tx, bd, acc_g)
write.csv(data_arquivo_acc, "resultado_acc.csv", row.names = FALSE)
#PROBLEMAS A RESOLVER
#karliane e alan - aprender a usar outros classificadores que n?o seja arvore
#dividir a base em treinamento e teste, o q eu fiz n?o t? certo.
#1 - transformar os atributos n?o num?ricos em num?ricos - tentar filtro weka - alan achou paleativo, usaremos de acordo com a necessidade
#2 - descobrir pq a confian?a da iris s? d? 1 - resolvido, n?o sei como...
#bases de dados
#bupa, cleveland, ecoli, glass, haberman, iris, monk, pima, vehide, wisconsin
#diret?rio local para salvar as bases e resultados
#fazer a instalaÃ§Ã£o/carregamento de pacotes e definir diretÃ³rio local
source('C:/local_R/projeto_karliane/configuracoes.R')
print("FunÃ§Ã£o para pegar a base de dados e colocar em uma variÃ¡vel base")
getdata <- function(...)
{
e <- new.env()
name <- data(..., envir = e)[1]
e[[name]]
}
#variaveis para guardar e gravar no arquivo
it_g <-c()
bd_g <-c()
thrConf_g<-c()
nr_added_exs_g<-c()
tx_g <- c()
acc_g <- c()
bd <- c()
tx <- c()
#  acc <- 0.0
for (i in 1:6){
for (j in 1:5){
if (j == 1) taxa = 5
else if (j == 2) taxa = 10
else if (j == 3) taxa = 15
else if (j == 4) taxa = 20
else if (j == 5) taxa = 25
source('C:/local_R/projeto_karliane/organiza_dados.R')
print("iniciando o treinamento")
#fun??o que ser? passada como par?metro predFunc da fun??o selftrain
f <- function(m,d) {
l <- predict(m,d,type='class')
c <- apply(predict(m,d),1,max)
data.frame(cl=l,p=c)
}
source('C:/local_R/projeto_karliane/treinamento.R')
}
}
#data frame que sera guardado no arquivo
data_arquivo <- data.frame(tx_g,it_g,bd_g,thrConf_g,nr_added_exs_g)
#escrever no arquivo
write.csv(data_arquivo, "resultado.csv", row.names = FALSE)
data_arquivo_acc <- data.frame(tx, bd, acc_g)
write.csv(data_arquivo_acc, "resultado_acc.csv", row.names = FALSE)
exemplos
#PROBLEMAS A RESOLVER
#karliane e alan - aprender a usar outros classificadores que n?o seja arvore
#dividir a base em treinamento e teste, o q eu fiz n?o t? certo.
#1 - transformar os atributos n?o num?ricos em num?ricos - tentar filtro weka - alan achou paleativo, usaremos de acordo com a necessidade
#2 - descobrir pq a confian?a da iris s? d? 1 - resolvido, n?o sei como...
#bases de dados
#bupa, cleveland, ecoli, glass, haberman, iris, monk, pima, vehide, wisconsin
#diret?rio local para salvar as bases e resultados
#fazer a instalaÃ§Ã£o/carregamento de pacotes e definir diretÃ³rio local
source('C:/local_R/projeto_karliane/configuracoes.R')
print("FunÃ§Ã£o para pegar a base de dados e colocar em uma variÃ¡vel base")
getdata <- function(...)
{
e <- new.env()
name <- data(..., envir = e)[1]
e[[name]]
}
#variaveis para guardar e gravar no arquivo
it_g <-c()
bd_g <-c()
thrConf_g<-c()
nr_added_exs_g<-c()
tx_g <- c()
acc_g <- c()
bd <- c()
tx <- c()
#  acc <- 0.0
for (i in 1:6){
for (j in 1:5){
if (j == 1) taxa = 5
else if (j == 2) taxa = 10
else if (j == 3) taxa = 15
else if (j == 4) taxa = 20
else if (j == 5) taxa = 25
source('C:/local_R/projeto_karliane/organiza_dados.R')
print("iniciando o treinamento")
#fun??o que ser? passada como par?metro predFunc da fun??o selftrain
f <- function(m,d) {
l <- predict(m,d,type='class')
c <- apply(predict(m,d),1,max)
data.frame(cl=l,p=c)
}
source('C:/local_R/projeto_karliane/treinamento.R')
}
}
#data frame que sera guardado no arquivo
data_arquivo <- data.frame(tx_g,it_g,bd_g,thrConf_g,nr_added_exs_g)
#escrever no arquivo
write.csv(data_arquivo, "resultado.csv", row.names = FALSE)
data_arquivo_acc <- data.frame(tx, bd, acc_g)
write.csv(data_arquivo_acc, "resultado_acc.csv", row.names = FALSE)
