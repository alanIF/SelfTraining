{
    "collab_server" : "",
    "contents" : "#setando parametros do selftrain\n\n\n#classes da base de dados\nform <- as.formula(paste(classe,'~', '.'))\n#  if (i==1) form <- Species~.  \t#para base IRIS\t\t  #OU form <- basetreinoselftraining$Species\n  #if (i==2) form <- class~.      #para base ECOLI\n#  if(i==3) form <- selector~.    #para base puma\n # if(i==4)form <- Type~. # para base glass\n  #if(i==5)form <- Survival_status~.# base haberman\n  #if (i==6) form <- class~.      #para base pima\n  #if(i==7) form <- num~. # para base cleveland\ndata <- base_treino_self_training\t#base de dados\nlearn <- learner('rpartXse',list(se=0.5))\npredFunc <- 'f'   \t\t\t#Uma string com o nome de uma fun??o que ir? realizar as tarefas de classifica??o probabil?stica que ser?o necess?rias durante o processo de self-training\nthrConf=0.9       \t\t\t#taxa de confian?a dos exemplos a serem incluidos no conjunto de rotulados\nmaxIts=10\t\t\t\t\t#n?mero m?ximo de itera??es\npercFull=1\t\t\t\t\t#Um n?mero entre 0 e 1. Se a porcentagem de exemplos rotulados atingir esse valor o processo de self-training ? parado\nverbose=TRUE\t\t\t\t#Um booleano indicando o n?vel de verbosidade?? (verbosity??) da fun??o\n\n#adapta??o da implementa??o do selftrain\ndata\nN <- NROW(data)\nit <- 0\n\n\nsoma_Conf <- 0\nqtd_Exemplos_Rot <- 0\ntotalrot <- 0\n\nsup <- which(!is.na(data[,as.character(form[[2]])])) #sup recebe o indice de todos os exemplos rotulados\nrepeat {\n  \n  it <- it+1\n  \n  \n  if (it>1) thrConf <- (thrConf + (soma_Conf/qtd_Exemplos_Rot) + (qtd_Exemplos_Rot/N))/3\n  soma_Conf <- 0\n  qtd_Exemplos_Rot <- 0\n  #      \tcat('zerou variaveis', '\\t limiar confian?a(thrConf).',thrConf,'\\n soma Confian?a rotulados. =',soma_Conf , '\\n quantidade rotulados. =',qtd_Exemplos_Rot,'\\n')\n  \n  \n  model <- runLearner(learn,form,data[sup,])\n  probPreds <- do.call(predFunc,list(model,data[-sup,]))\n  \n  \n  new <- which(probPreds[,2] > thrConf)\n  \n  \n  \n  \n  \n  if (verbose) {\n    cat('tx_incl',taxa,'IT.',it,'BD',i,thrConf,'\\t nr. added exs. =',length(new),'\\n') \n    ##guardando nas variaveis \n    it_g <-c(it_g,it)\n    bd_g <-c(bd_g,i)\n    thrConf_g<-c(thrConf_g,thrConf)\n    nr_added_exs_g<-c(nr_added_exs_g,length(new))\n    tx_g <- c(tx_g, taxa)\n#    acc_g <- c(acc_g, acc)\n    ##resultado <-  c(it,\",\",i,\",\",thrConf,\",\",length(new))\n    ##write(resultado, file = \"result\")\n    \n    \n  }\n  \n  \n  if (length(new)) {\n    data[(1:N)[-sup][new],as.character(form[[2]])] <- as.character(probPreds[new,1])\n    \n    soma_Conf <- sum(soma_Conf, probPreds[new,2])\n    qtd_Exemplos_Rot <- length(data[(1:N)[-sup][new],as.character(form[[2]])])\n    totalrot <- totalrot + qtd_Exemplos_Rot\n    #   \t      cat('dentro do self training', '\\n limiar confian?a(thrConf).',thrConf,'\\n soma Confian?a rotulados. =',soma_Conf, '\\n quantidade rotulados. =',qtd_Exemplos_Rot,'\\n','\\n total rotulados. =',totalrot,'\\n')\n    \n    sup <- c(sup,(1:N)[-sup][new])\n  } else break\n  if (it == maxIts || length(sup)/N >= percFull) break\n}\n\n#matriz de confusao do selftraining\n#N?O EST? FUNCIONANDO PARA BASE DE DADOS 2, A MATRIZ N?O APARECE COM A MESMA QUANTIDADE DE LINHAS E COLUNAS  \nif (i==1){\n  matriz_confusao1 = table(predict(model,base_teste,type='class'),base_teste$Species)\n  n <- length(base_teste$Species)\n}else if (i==2){\n  matriz_confusao1 = table(predict(model,base_teste,type='class'),base_teste$class)\n  n <- length(base_teste$class)\n}\n#matriz_confusao1\n#substituir os ifÂ´s abaixo por:\ncat(\"\\n Acerto (%) = \\n\", levels(base_original[, classe]), \"\\n\", diag(matriz_confusao1) / colSums(matriz_confusao1) * 100)\n\n#if (i==1){\n # cat(\"\\n Acerto (%) = \\n\", levels(base_original[, \"Species\"]), \"\\n\", diag(matriz_confusao1) / colSums(matriz_confusao1) * 100)\n#}else if (i==2)\n # cat(\"\\n Acerto (%) = \\n\", levels(base_original[, \"class\"]), \"\\n\", diag(matriz_confusao1) / colSums(matriz_confusao1) * 100)\nacc <- ((sum(diag(matriz_confusao1)) / n) * 100)\nacc_g <- c(acc_g, acc)\nbd <- c(bd, i)\ntx <- c(tx, taxa)\ncat(\"\\n Acerto global (%) =\", acc)\n\n\n#  data\n#predicted predict(model, newdata = base_teste)\ncat('FIM', '\\t base de dados ', i, '\\n', 'total rotulados: ', totalrot, '\\n')\n",
    "created" : 1496941314681.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2793282870",
    "id" : "7C574905",
    "lastKnownWriteTime" : 1497010255,
    "last_content_update" : 1497010255560,
    "path" : "C:/local_R/projeto_karliane/treinamento.R",
    "project_path" : "treinamento.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}